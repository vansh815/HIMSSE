export declare type TSubscriber<T> = (val: T) => void;
export declare type TSubscription = () => void;
export declare type TSubscribe<T> = (subscriber: TSubscriber<T>) => TSubscription;
export declare type TOperator<T, K> = (val: T, done: (result: K) => void) => void;
export interface TObservable<T> {
    subscribe: TSubscribe<T>;
    pipe(...operators: []): TObservable<T>;
    pipe<R1>(...operators: [TOperator<T, R1>]): TObservable<R1>;
    pipe<R1, R2>(...operators: [TOperator<T, R1>, TOperator<R1, R2>]): TObservable<R2>;
    pipe<R1, R2, R3>(...operators: [TOperator<T, R1>, TOperator<R1, R2>, TOperator<R2, R3>]): TObservable<R3>;
    pipe<R1, R2, R3, R4>(...operators: [TOperator<T, R1>, TOperator<R1, R2>, TOperator<R2, R3>, TOperator<R3, R4>]): TObservable<R4>;
}
export interface TSubject<T> extends TObservable<T> {
    next(val: T): void;
    subscribers: TSubscriber<T>[];
}
export declare function observable<T, K>(source: TSubscribe<T>, operator: TOperator<T, K>): {
    subscribe: (subscriber: TSubscriber<K>) => TSubscription;
    pipe: {
        (): TObservable<K>;
        <R1>(operators_0: TOperator<K, R1>): TObservable<R1>;
        <R1_1, R2>(operators_0: TOperator<K, R1_1>, operators_1: TOperator<R1_1, R2>): TObservable<R2>;
        <R1_2, R2_1, R3>(operators_0: TOperator<K, R1_2>, operators_1: TOperator<R1_2, R2_1>, operators_2: TOperator<R2_1, R3>): TObservable<R3>;
        <R1_3, R2_2, R3_1, R4>(operators_0: TOperator<K, R1_3>, operators_1: TOperator<R1_3, R2_2>, operators_2: TOperator<R2_2, R3_1>, operators_3: TOperator<R3_1, R4>): TObservable<R4>;
    };
};
export declare function subject<T>(initial?: T, distinct?: boolean): TSubject<T>;
export declare function coldSubject<T>(): TSubject<T>;
export declare function combineLatest<S1, S2>(s1: TObservable<S1>, s2: TObservable<S2>): TObservable<[S1, S2]>;
export declare function combineLatest<S1, S2, S3>(s1: TObservable<S1>, s2: TObservable<S2>, s3: TObservable<S3>): TObservable<[S1, S2, S3]>;
export declare function combineLatest<S1, S2, S3, S4>(s1: TObservable<S1>, s2: TObservable<S2>, s3: TObservable<S3>, s4: TObservable<S4>): TObservable<[S1, S2, S3, S4]>;
export declare function combineLatest<S1, S2, S3, S4, S5>(s1: TObservable<S1>, s2: TObservable<S2>, s3: TObservable<S3>, s4: TObservable<S4>, s5: TObservable<S5>): TObservable<[S1, S2, S3, S4, S5]>;
export declare function combineLatest<S1, S2, S3, S4, S5, S6>(...s: [TObservable<S1>, TObservable<S2>, TObservable<S3>, TObservable<S4>, TObservable<S5>, TObservable<S6>]): TObservable<[S1, S2, S3, S4, S5, S6]>;
export declare function combineLatest<S1, S2, S3, S4, S5, S6, S7>(s1: TObservable<S1>, s2: TObservable<S2>, s3: TObservable<S3>, s4: TObservable<S4>, s5: TObservable<S5>, s6: TObservable<S6>, s7: TObservable<S7>): TObservable<[S1, S2, S3, S4, S5, S6, S7]>;
export declare function combineLatest<S1, S2, S3, S4, S5, S6, S7, S8>(s1: TObservable<S1>, s2: TObservable<S2>, s3: TObservable<S3>, s4: TObservable<S4>, s5: TObservable<S5>, s6: TObservable<S6>, s7: TObservable<S7>, s8: TObservable<S8>): TObservable<[S1, S2, S3, S4, S5, S6, S7, S8]>;
export declare function combineLatest<S1, S2, S3, S4, S5, S6, S7, S8, S9>(s1: TObservable<S1>, s2: TObservable<S2>, s3: TObservable<S3>, s4: TObservable<S4>, s5: TObservable<S5>, s6: TObservable<S6>, s7: TObservable<S7>, s8: TObservable<S8>, s9: TObservable<S9>): TObservable<[S1, S2, S3, S4, S5, S6, S7, S8, S9]>;
export declare function combineLatest<S1, S2, S3, S4, S5, S6, S7, S8, S9, S10>(s1: TObservable<S1>, s2: TObservable<S2>, s3: TObservable<S3>, s4: TObservable<S4>, s5: TObservable<S5>, s6: TObservable<S6>, s7: TObservable<S7>, s8: TObservable<S8>, s9: TObservable<S9>, s10: TObservable<S10>): TObservable<[S1, S2, S3, S4, S5, S6, S7, S8, S9, S10]>;
export declare function combineLatest<S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11>(s1: TObservable<S1>, s2: TObservable<S2>, s3: TObservable<S3>, s4: TObservable<S4>, s5: TObservable<S5>, s6: TObservable<S6>, s7: TObservable<S7>, s8: TObservable<S8>, s9: TObservable<S9>, s10: TObservable<S10>, s11: TObservable<S11>): TObservable<[S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11]>;
export declare function map<T, K>(map: (val: T) => K): (val: T, subscriber: TSubscriber<K>) => void;
export declare function mapTo<T>(val: T): (_: any, done: TSubscriber<T>) => void;
export declare function skip<T>(times: number): (val: T, done: TSubscriber<T>) => void;
export declare function filter<T>(predicate: (val: T) => boolean): (val: T, done: TSubscriber<T>) => void;
export declare function duc<T>(comparator?: (current: T, next: T) => boolean): (next: T, done: TSubscriber<T>) => void;
export declare function debounceTime<T>(time: number): (newVal: T, done: TSubscriber<T>) => void;
export declare function throttleTime<T>(time: number): (newVal: T, done: TSubscriber<T>) => void;
export declare function scan<T, K>(scanner: (prevVal: T, current: K) => T, initialValue: T): (newVal: K, done: TSubscriber<T>) => void;
export declare function withLatestFrom<T, R1>(s1: TObservable<R1>): (val: T, done: TSubscriber<[T, R1]>) => void;
export declare function withLatestFrom<T, R1, R2>(s1: TObservable<R1>, s2: TObservable<R2>): (val: T, done: TSubscriber<[T, R1, R2]>) => void;
export declare function withLatestFrom<T, R1, R2, R3>(s1: TObservable<R1>, s2: TObservable<R2>, s3: TObservable<R3>): (val: T, done: TSubscriber<[T, R1, R2, R3]>) => void;
export declare function withLatestFrom<T, R1, R2, R3, R4>(s1: TObservable<R1>, s2: TObservable<R2>, s3: TObservable<R3>, s4: TObservable<R4>): (val: T, done: TSubscriber<[T, R1, R2, R3, R4]>) => void;
export declare function withLatestFrom<T, R1, R2, R3, R4, R5>(s1: TObservable<R1>, s2: TObservable<R2>, s3: TObservable<R3>, s4: TObservable<R4>, s5: TObservable<R5>): (val: T, done: TSubscriber<[T, R1, R2, R3, R4, R5]>) => void;
export declare function withLatestFrom<T, R1, R2, R3, R4, R5, R6>(s1: TObservable<R1>, s2: TObservable<R2>, s3: TObservable<R3>, s4: TObservable<R4>, s5: TObservable<R5>, s6: TObservable<R6>): (val: T, done: TSubscriber<[T, R1, R2, R3, R4, R5, R6]>) => void;
export declare function withLatestFrom<T, R1, R2, R3, R4, R5, R6, R7>(s1: TObservable<R1>, s2: TObservable<R2>, s3: TObservable<R3>, s4: TObservable<R4>, s5: TObservable<R5>, s6: TObservable<R6>, s7: TObservable<R7>): (val: T, done: TSubscriber<[T, R1, R2, R3, R4, R5, R6, R7]>) => void;
