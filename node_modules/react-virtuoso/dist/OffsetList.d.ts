import { AATree } from './AATree';
interface OffsetValue {
    startIndex: number;
    endIndex: number;
    size: number;
}
export interface Item {
    index: number;
    offset: number;
    size: number;
}
export declare class OffsetList {
    rangeTree: AATree<number>;
    offsetTree: AATree<OffsetValue>;
    private nanIndices;
    private initialTopMostItemIndex;
    private rangeSize;
    private maxRangeSize;
    private rangeSizeExceededCallback;
    static create(): OffsetList;
    private constructor();
    empty(): boolean;
    private fromTree;
    insert(start: number, end: number, size: number): OffsetList;
    insertSpots(spotIndexes: number[], value: number): OffsetList;
    offsetOf(index: number): number;
    itemAt(index: number): Item;
    indexRange(startIndex: number, endIndex: number): Item[];
    range(startOffset: number, endOffset: number, minIndex?: number, maxIndex?: number): Item[];
    total(endIndex: number): number;
    getOffsets(indices: number[]): IndexList;
    setInitialIndex(topMostItemIndex: number): OffsetList;
    getDefaultSize(): number;
    adjustForPrependedItems(count: number): OffsetList;
    configureMaxRangeSize(maxRangeSize: number, maxRangeSizeExceededCallback: () => void): void;
}
export declare class IndexList {
    tree: AATree<number>;
    constructor(tree: AATree<number>);
    findMaxValue(offset: number): number;
    empty(): boolean;
}
export {};
