interface NodeData<T> {
    key: number;
    value: T;
}
interface Range<T> {
    start: number;
    end: number;
    value: T;
}
declare type FindCallback<T> = (value: T) => 1 | 0 | -1;
export declare type NodeIterator<T> = IterableIterator<NodeData<T>>;
export declare type RangeIterator<T> = IterableIterator<Range<T>>;
export declare class AATree<T> {
    private root;
    static empty<T>(): AATree<T>;
    private constructor();
    find(key: number): T | undefined;
    findMax(key: number): number;
    findMaxValue(key: number): T;
    findWith(callback: FindCallback<T>): [number, T] | void;
    insert(key: number, value: T): AATree<T>;
    remove(key: number): AATree<T>;
    shift(amount: number): AATree<T>;
    empty(): boolean;
    keys(): number[];
    walk(): NodeData<T>[];
    walkWithin(start: number, end: number): NodeData<T>[];
    ranges(): Range<T>[];
    rangesWithin(start: number, end: number): Range<T>[];
    isInvariant(): boolean;
}
export {};
