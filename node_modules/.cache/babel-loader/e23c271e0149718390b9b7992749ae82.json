{"ast":null,"code":"import fromCharCode from '../constant/from-char-code.mjs';\n\nfunction safeFromInt(value, base) {\n  var code = parseInt(value, base);\n\n  if ( // C0 except for HT, LF, FF, CR, space\n  code < 9 || code === 11 || code > 13 && code < 32 || // Control character (DEL) of the basic block and C1 controls.\n  code > 126 && code < 160 || // Lone high surrogates and low surrogates.\n  code > 55295 && code < 57344 || // Noncharacters.\n  code > 64975 && code < 65008 || (code & 65535) === 65535 || (code & 65535) === 65534 || // Out of range\n  code > 1114111) {\n    return '\\uFFFD';\n  }\n\n  return fromCharCode(code);\n}\n\nexport default safeFromInt;","map":{"version":3,"sources":["/Users/vanshsmacpro/Desktop/Software_engineering/HIMSSE/node_modules/micromark/dist/util/safe-from-int.mjs"],"names":["fromCharCode","safeFromInt","value","base","code","parseInt"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,gCAAzB;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,IAA5B,EAAkC;AAChC,MAAIC,IAAI,GAAGC,QAAQ,CAACH,KAAD,EAAQC,IAAR,CAAnB;;AAEA,OACE;AACAC,EAAAA,IAAI,GAAG,CAAP,IACAA,IAAI,KAAK,EADT,IAECA,IAAI,GAAG,EAAP,IAAaA,IAAI,GAAG,EAFrB,IAE4B;AAC3BA,EAAAA,IAAI,GAAG,GAAP,IAAcA,IAAI,GAAG,GAHtB,IAG8B;AAC7BA,EAAAA,IAAI,GAAG,KAAP,IAAgBA,IAAI,GAAG,KAJxB,IAIkC;AACjCA,EAAAA,IAAI,GAAG,KAAP,IAAgBA,IAAI,GAAG,KALxB,IAMA,CAACA,IAAI,GAAG,KAAR,MAAmB,KANnB,IAOA,CAACA,IAAI,GAAG,KAAR,MAAmB,KAPnB,IAO4B;AAC5BA,EAAAA,IAAI,GAAG,OAVT,EAWE;AACA,WAAO,QAAP;AACD;;AAED,SAAOJ,YAAY,CAACI,IAAD,CAAnB;AACD;;AAED,eAAeH,WAAf","sourcesContent":["import fromCharCode from '../constant/from-char-code.mjs'\n\nfunction safeFromInt(value, base) {\n  var code = parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.\n    (code > 126 && code < 160) || // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) || // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n\n  return fromCharCode(code)\n}\n\nexport default safeFromInt\n"]},"metadata":{},"sourceType":"module"}