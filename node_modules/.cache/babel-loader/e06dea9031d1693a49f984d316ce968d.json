{"ast":null,"code":"import markdownLineEnding from '../character/markdown-line-ending.mjs';\nimport spaceFactory from '../tokenize/factory-space.mjs';\nvar tokenize = initializeContent;\n\nfunction initializeContent(effects) {\n  var contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  var previous;\n  return contentStart;\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return spaceFactory(effects, contentStart, 'linePrefix');\n  }\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph');\n    return lineStart(code);\n  }\n\n  function lineStart(code) {\n    var token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous: previous\n    });\n\n    if (previous) {\n      previous.next = token;\n    }\n\n    previous = token;\n    return data(code);\n  }\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText');\n      effects.exit('paragraph');\n      effects.consume(code);\n      return;\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit('chunkText');\n      return lineStart;\n    } // Data.\n\n\n    effects.consume(code);\n    return data;\n  }\n}\n\nexport { tokenize };","map":{"version":3,"sources":["/Users/vanshsmacpro/Desktop/Software_engineering/HIMSSE/node_modules/micromark/dist/initialize/content.mjs"],"names":["markdownLineEnding","spaceFactory","tokenize","initializeContent","effects","contentStart","attempt","parser","constructs","contentInitial","afterContentStartConstruct","paragraphInitial","previous","code","consume","enter","exit","lineStart","token","contentType","next","data"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,uCAA/B;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAEA,IAAIC,QAAQ,GAAGC,iBAAf;;AAEA,SAASA,iBAAT,CAA2BC,OAA3B,EAAoC;AAClC,MAAIC,YAAY,GAAGD,OAAO,CAACE,OAAR,CACjB,KAAKC,MAAL,CAAYC,UAAZ,CAAuBC,cADN,EAEjBC,0BAFiB,EAGjBC,gBAHiB,CAAnB;AAKA,MAAIC,QAAJ;AACA,SAAOP,YAAP;;AAEA,WAASK,0BAAT,CAAoCG,IAApC,EAA0C;AACxC,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjBT,MAAAA,OAAO,CAACU,OAAR,CAAgBD,IAAhB;AACA;AACD;;AAEDT,IAAAA,OAAO,CAACW,KAAR,CAAc,YAAd;AACAX,IAAAA,OAAO,CAACU,OAAR,CAAgBD,IAAhB;AACAT,IAAAA,OAAO,CAACY,IAAR,CAAa,YAAb;AACA,WAAOf,YAAY,CAACG,OAAD,EAAUC,YAAV,EAAwB,YAAxB,CAAnB;AACD;;AAED,WAASM,gBAAT,CAA0BE,IAA1B,EAAgC;AAC9BT,IAAAA,OAAO,CAACW,KAAR,CAAc,WAAd;AACA,WAAOE,SAAS,CAACJ,IAAD,CAAhB;AACD;;AAED,WAASI,SAAT,CAAmBJ,IAAnB,EAAyB;AACvB,QAAIK,KAAK,GAAGd,OAAO,CAACW,KAAR,CAAc,WAAd,EAA2B;AACrCI,MAAAA,WAAW,EAAE,MADwB;AAErCP,MAAAA,QAAQ,EAAEA;AAF2B,KAA3B,CAAZ;;AAKA,QAAIA,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACQ,IAAT,GAAgBF,KAAhB;AACD;;AAEDN,IAAAA,QAAQ,GAAGM,KAAX;AACA,WAAOG,IAAI,CAACR,IAAD,CAAX;AACD;;AAED,WAASQ,IAAT,CAAcR,IAAd,EAAoB;AAClB,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjBT,MAAAA,OAAO,CAACY,IAAR,CAAa,WAAb;AACAZ,MAAAA,OAAO,CAACY,IAAR,CAAa,WAAb;AACAZ,MAAAA,OAAO,CAACU,OAAR,CAAgBD,IAAhB;AACA;AACD;;AAED,QAAIb,kBAAkB,CAACa,IAAD,CAAtB,EAA8B;AAC5BT,MAAAA,OAAO,CAACU,OAAR,CAAgBD,IAAhB;AACAT,MAAAA,OAAO,CAACY,IAAR,CAAa,WAAb;AACA,aAAOC,SAAP;AACD,KAZiB,CAYhB;;;AAEFb,IAAAA,OAAO,CAACU,OAAR,CAAgBD,IAAhB;AACA,WAAOQ,IAAP;AACD;AACF;;AAED,SAAQnB,QAAR","sourcesContent":["import markdownLineEnding from '../character/markdown-line-ending.mjs'\nimport spaceFactory from '../tokenize/factory-space.mjs'\n\nvar tokenize = initializeContent\n\nfunction initializeContent(effects) {\n  var contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  var previous\n  return contentStart\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return spaceFactory(effects, contentStart, 'linePrefix')\n  }\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  function lineStart(code) {\n    var token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous: previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n\nexport {tokenize}\n"]},"metadata":{},"sourceType":"module"}