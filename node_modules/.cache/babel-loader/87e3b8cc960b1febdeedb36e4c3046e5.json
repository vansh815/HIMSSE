{"ast":null,"code":"import miniflat from './util/miniflat.mjs';\nimport * as content from './initialize/content.mjs';\nimport * as document from './initialize/document.mjs';\nimport * as flow from './initialize/flow.mjs';\nimport { string, text } from './initialize/text.mjs';\nimport combineExtensions from './util/combine-extensions.mjs';\nimport createTokenizer from './util/create-tokenizer.mjs';\nimport * as constructs from './constructs.mjs';\n\nfunction parse(options) {\n  var settings = options || {};\n  var parser = {\n    defined: [],\n    constructs: combineExtensions([constructs].concat(miniflat(settings.extensions))),\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  function create(initializer) {\n    return creator;\n\n    function creator(from) {\n      return createTokenizer(parser, initializer, from);\n    }\n  }\n}\n\nexport default parse;","map":{"version":3,"sources":["/Users/vanshsmacpro/Desktop/Software_engineering/HIMSSE/node_modules/micromark/dist/parse.mjs"],"names":["miniflat","content","document","flow","string","text","combineExtensions","createTokenizer","constructs","parse","options","settings","parser","defined","concat","extensions","create","initializer","creator","from"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,qBAArB;AACA,OAAO,KAAKC,OAAZ,MAAyB,0BAAzB;AACA,OAAO,KAAKC,QAAZ,MAA0B,2BAA1B;AACA,OAAO,KAAKC,IAAZ,MAAsB,uBAAtB;AACA,SAAQC,MAAR,EAAgBC,IAAhB,QAA2B,uBAA3B;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAO,KAAKC,UAAZ,MAA4B,kBAA5B;;AAEA,SAASC,KAAT,CAAeC,OAAf,EAAwB;AACtB,MAAIC,QAAQ,GAAGD,OAAO,IAAI,EAA1B;AACA,MAAIE,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE,EADE;AAEXL,IAAAA,UAAU,EAAEF,iBAAiB,CAC3B,CAACE,UAAD,EAAaM,MAAb,CAAoBd,QAAQ,CAACW,QAAQ,CAACI,UAAV,CAA5B,CAD2B,CAFlB;AAKXd,IAAAA,OAAO,EAAEe,MAAM,CAACf,OAAD,CALJ;AAMXC,IAAAA,QAAQ,EAAEc,MAAM,CAACd,QAAD,CANL;AAOXC,IAAAA,IAAI,EAAEa,MAAM,CAACb,IAAD,CAPD;AAQXC,IAAAA,MAAM,EAAEY,MAAM,CAACZ,MAAD,CARH;AASXC,IAAAA,IAAI,EAAEW,MAAM,CAACX,IAAD;AATD,GAAb;AAWA,SAAOO,MAAP;;AAEA,WAASI,MAAT,CAAgBC,WAAhB,EAA6B;AAC3B,WAAOC,OAAP;;AAEA,aAASA,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,aAAOZ,eAAe,CAACK,MAAD,EAASK,WAAT,EAAsBE,IAAtB,CAAtB;AACD;AACF;AACF;;AAED,eAAeV,KAAf","sourcesContent":["import miniflat from './util/miniflat.mjs'\nimport * as content from './initialize/content.mjs'\nimport * as document from './initialize/document.mjs'\nimport * as flow from './initialize/flow.mjs'\nimport {string, text} from './initialize/text.mjs'\nimport combineExtensions from './util/combine-extensions.mjs'\nimport createTokenizer from './util/create-tokenizer.mjs'\nimport * as constructs from './constructs.mjs'\n\nfunction parse(options) {\n  var settings = options || {}\n  var parser = {\n    defined: [],\n    constructs: combineExtensions(\n      [constructs].concat(miniflat(settings.extensions))\n    ),\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  function create(initializer) {\n    return creator\n\n    function creator(from) {\n      return createTokenizer(parser, initializer, from)\n    }\n  }\n}\n\nexport default parse\n"]},"metadata":{},"sourceType":"module"}