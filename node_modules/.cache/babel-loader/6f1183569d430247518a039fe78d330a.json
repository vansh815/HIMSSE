{"ast":null,"code":"import normalizeIdentifier from '../util/normalize-identifier.mjs';\nimport markdownLineEnding from '../character/markdown-line-ending.mjs';\nimport spaceFactory from './factory-space.mjs';\nimport markdownLineEndingOrSpace from '../character/markdown-line-ending-or-space.mjs';\nimport destinationFactory from './factory-destination.mjs';\nimport labelFactory from './factory-label.mjs';\nimport whitespaceFactory from './factory-whitespace.mjs';\nimport titleFactory from './factory-title.mjs';\nvar definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\nvar titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n};\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  var self = this;\n  var identifier;\n  return start;\n\n  function start(code) {\n    effects.enter('definition');\n    return labelFactory.call(self, effects, labelAfter, nok, 'definitionLabel', 'definitionLabelMarker', 'definitionLabelString')(code);\n  }\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker'); // Note: blank lines can’t exist in content.\n\n      return whitespaceFactory(effects, destinationFactory(effects, effects.attempt(titleConstruct, spaceFactory(effects, after, 'whitespace'), spaceFactory(effects, after, 'whitespace')), nok, 'definitionDestination', 'definitionDestinationLiteral', 'definitionDestinationLiteralMarker', 'definitionDestinationRaw', 'definitionDestinationString'));\n    }\n\n    return nok(code);\n  }\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition');\n\n      if (self.parser.defined.indexOf(identifier) < 0) {\n        self.parser.defined.push(identifier);\n      }\n\n      return ok(code);\n    }\n\n    return nok(code);\n  }\n}\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start;\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code) ? whitespaceFactory(effects, before)(code) : nok(code);\n  }\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return titleFactory(effects, spaceFactory(effects, after, 'whitespace'), nok, 'definitionTitle', 'definitionTitleMarker', 'definitionTitleString')(code);\n    }\n\n    return nok(code);\n  }\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}\n\nexport default definition;","map":{"version":3,"sources":["/Users/vanshsmacpro/Desktop/Software_engineering/HIMSSE/node_modules/micromark/dist/tokenize/definition.mjs"],"names":["normalizeIdentifier","markdownLineEnding","spaceFactory","markdownLineEndingOrSpace","destinationFactory","labelFactory","whitespaceFactory","titleFactory","definition","name","tokenize","tokenizeDefinition","titleConstruct","tokenizeTitle","partial","effects","ok","nok","self","identifier","start","code","enter","call","labelAfter","sliceSerialize","events","length","slice","consume","exit","attempt","after","parser","defined","indexOf","push","before"],"mappings":"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","sourcesContent":["import normalizeIdentifier from '../util/normalize-identifier.mjs'\nimport markdownLineEnding from '../character/markdown-line-ending.mjs'\nimport spaceFactory from './factory-space.mjs'\nimport markdownLineEndingOrSpace from '../character/markdown-line-ending-or-space.mjs'\nimport destinationFactory from './factory-destination.mjs'\nimport labelFactory from './factory-label.mjs'\nimport whitespaceFactory from './factory-whitespace.mjs'\nimport titleFactory from './factory-title.mjs'\n\nvar definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\nvar titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  var self = this\n  var identifier\n  return start\n\n  function start(code) {\n    effects.enter('definition')\n    return labelFactory.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return whitespaceFactory(\n        effects,\n        destinationFactory(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            spaceFactory(effects, after, 'whitespace'),\n            spaceFactory(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (self.parser.defined.indexOf(identifier) < 0) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? whitespaceFactory(effects, before)(code)\n      : nok(code)\n  }\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return titleFactory(\n        effects,\n        spaceFactory(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n\nexport default definition\n"]},"metadata":{},"sourceType":"module"}