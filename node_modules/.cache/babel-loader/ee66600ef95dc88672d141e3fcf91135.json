{"ast":null,"code":"import markdownLineEnding from '../character/markdown-line-ending.mjs';\nimport markdownSpace from '../character/markdown-space.mjs';\nimport spaceFactory from './factory-space.mjs';\n\nfunction whitespaceFactory(effects, ok) {\n  var seen;\n  return start;\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      seen = true;\n      return start;\n    }\n\n    if (markdownSpace(code)) {\n      return spaceFactory(effects, start, seen ? 'linePrefix' : 'lineSuffix')(code);\n    }\n\n    return ok(code);\n  }\n}\n\nexport default whitespaceFactory;","map":{"version":3,"sources":["/Users/vanshsmacpro/Desktop/Software_engineering/HIMSSE/node_modules/micromark/dist/tokenize/factory-whitespace.mjs"],"names":["markdownLineEnding","markdownSpace","spaceFactory","whitespaceFactory","effects","ok","seen","start","code","enter","consume","exit"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,uCAA/B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,YAAP,MAAyB,qBAAzB;;AAEA,SAASC,iBAAT,CAA2BC,OAA3B,EAAoCC,EAApC,EAAwC;AACtC,MAAIC,IAAJ;AACA,SAAOC,KAAP;;AAEA,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnB,QAAIR,kBAAkB,CAACQ,IAAD,CAAtB,EAA8B;AAC5BJ,MAAAA,OAAO,CAACK,KAAR,CAAc,YAAd;AACAL,MAAAA,OAAO,CAACM,OAAR,CAAgBF,IAAhB;AACAJ,MAAAA,OAAO,CAACO,IAAR,CAAa,YAAb;AACAL,MAAAA,IAAI,GAAG,IAAP;AACA,aAAOC,KAAP;AACD;;AAED,QAAIN,aAAa,CAACO,IAAD,CAAjB,EAAyB;AACvB,aAAON,YAAY,CACjBE,OADiB,EAEjBG,KAFiB,EAGjBD,IAAI,GAAG,YAAH,GAAkB,YAHL,CAAZ,CAILE,IAJK,CAAP;AAKD;;AAED,WAAOH,EAAE,CAACG,IAAD,CAAT;AACD;AACF;;AAED,eAAeL,iBAAf","sourcesContent":["import markdownLineEnding from '../character/markdown-line-ending.mjs'\nimport markdownSpace from '../character/markdown-space.mjs'\nimport spaceFactory from './factory-space.mjs'\n\nfunction whitespaceFactory(effects, ok) {\n  var seen\n  return start\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return spaceFactory(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n\nexport default whitespaceFactory\n"]},"metadata":{},"sourceType":"module"}