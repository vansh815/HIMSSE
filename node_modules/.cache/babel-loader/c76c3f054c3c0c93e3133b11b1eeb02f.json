{"ast":null,"code":"import markdownSpace from '../character/markdown-space.mjs';\nimport spaceFactory from './factory-space.mjs';\nvar blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit: exit\n};\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  var self = this;\n  return start;\n\n  function start(code) {\n    if (code === 62) {\n      if (!self.containerState.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        });\n        self.containerState.open = true;\n      }\n\n      effects.enter('blockQuotePrefix');\n      effects.enter('blockQuoteMarker');\n      effects.consume(code);\n      effects.exit('blockQuoteMarker');\n      return after;\n    }\n\n    return nok(code);\n  }\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace');\n      effects.consume(code);\n      effects.exit('blockQuotePrefixWhitespace');\n      effects.exit('blockQuotePrefix');\n      return ok;\n    }\n\n    effects.exit('blockQuotePrefix');\n    return ok(code);\n  }\n}\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return spaceFactory(effects, effects.attempt(blockQuote, ok, nok), 'linePrefix', this.parser.constructs.disable.null.indexOf('codeIndented') > -1 ? undefined : 4);\n}\n\nfunction exit(effects) {\n  effects.exit('blockQuote');\n}\n\nexport default blockQuote;","map":{"version":3,"sources":["/Users/vanshsmacpro/Desktop/Software_engineering/HIMSSE/node_modules/micromark/dist/tokenize/block-quote.mjs"],"names":["markdownSpace","spaceFactory","blockQuote","name","tokenize","tokenizeBlockQuoteStart","continuation","tokenizeBlockQuoteContinuation","exit","effects","ok","nok","self","start","code","containerState","open","enter","_container","consume","after","attempt","parser","constructs","disable","null","indexOf","undefined"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iCAA1B;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AAEA,IAAIC,UAAU,GAAG;AACfC,EAAAA,IAAI,EAAE,YADS;AAEfC,EAAAA,QAAQ,EAAEC,uBAFK;AAGfC,EAAAA,YAAY,EAAE;AACZF,IAAAA,QAAQ,EAAEG;AADE,GAHC;AAMfC,EAAAA,IAAI,EAAEA;AANS,CAAjB;;AASA,SAASH,uBAAT,CAAiCI,OAAjC,EAA0CC,EAA1C,EAA8CC,GAA9C,EAAmD;AACjD,MAAIC,IAAI,GAAG,IAAX;AACA,SAAOC,KAAP;;AAEA,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnB,QAAIA,IAAI,KAAK,EAAb,EAAiB;AACf,UAAI,CAACF,IAAI,CAACG,cAAL,CAAoBC,IAAzB,EAA+B;AAC7BP,QAAAA,OAAO,CAACQ,KAAR,CAAc,YAAd,EAA4B;AAC1BC,UAAAA,UAAU,EAAE;AADc,SAA5B;AAGAN,QAAAA,IAAI,CAACG,cAAL,CAAoBC,IAApB,GAA2B,IAA3B;AACD;;AAEDP,MAAAA,OAAO,CAACQ,KAAR,CAAc,kBAAd;AACAR,MAAAA,OAAO,CAACQ,KAAR,CAAc,kBAAd;AACAR,MAAAA,OAAO,CAACU,OAAR,CAAgBL,IAAhB;AACAL,MAAAA,OAAO,CAACD,IAAR,CAAa,kBAAb;AACA,aAAOY,KAAP;AACD;;AAED,WAAOT,GAAG,CAACG,IAAD,CAAV;AACD;;AAED,WAASM,KAAT,CAAeN,IAAf,EAAqB;AACnB,QAAId,aAAa,CAACc,IAAD,CAAjB,EAAyB;AACvBL,MAAAA,OAAO,CAACQ,KAAR,CAAc,4BAAd;AACAR,MAAAA,OAAO,CAACU,OAAR,CAAgBL,IAAhB;AACAL,MAAAA,OAAO,CAACD,IAAR,CAAa,4BAAb;AACAC,MAAAA,OAAO,CAACD,IAAR,CAAa,kBAAb;AACA,aAAOE,EAAP;AACD;;AAEDD,IAAAA,OAAO,CAACD,IAAR,CAAa,kBAAb;AACA,WAAOE,EAAE,CAACI,IAAD,CAAT;AACD;AACF;;AAED,SAASP,8BAAT,CAAwCE,OAAxC,EAAiDC,EAAjD,EAAqDC,GAArD,EAA0D;AACxD,SAAOV,YAAY,CACjBQ,OADiB,EAEjBA,OAAO,CAACY,OAAR,CAAgBnB,UAAhB,EAA4BQ,EAA5B,EAAgCC,GAAhC,CAFiB,EAGjB,YAHiB,EAIjB,KAAKW,MAAL,CAAYC,UAAZ,CAAuBC,OAAvB,CAA+BC,IAA/B,CAAoCC,OAApC,CAA4C,cAA5C,IAA8D,CAAC,CAA/D,GACIC,SADJ,GAEI,CANa,CAAnB;AAQD;;AAED,SAASnB,IAAT,CAAcC,OAAd,EAAuB;AACrBA,EAAAA,OAAO,CAACD,IAAR,CAAa,YAAb;AACD;;AAED,eAAeN,UAAf","sourcesContent":["import markdownSpace from '../character/markdown-space.mjs'\nimport spaceFactory from './factory-space.mjs'\n\nvar blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit: exit\n}\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  var self = this\n  return start\n\n  function start(code) {\n    if (code === 62) {\n      if (!self.containerState.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        self.containerState.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return spaceFactory(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.indexOf('codeIndented') > -1\n      ? undefined\n      : 4\n  )\n}\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n\nexport default blockQuote\n"]},"metadata":{},"sourceType":"module"}